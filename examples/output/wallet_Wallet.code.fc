#include "wallet_Wallet.headers.fc";
#include "wallet_Wallet.stdlib.fc";
#include "wallet_Wallet.storage.fc";

;;
;; Contract Wallet functions
;;

(int, int, int) $Wallet$_contract_init(int $key, int $walletId) impure inline_ref {
    var (($self'seqno, $self'key, $self'walletId)) = (0, null(), null());
    $self'key = $key;
    $self'walletId = $walletId;
    return ($self'seqno, $self'key, $self'walletId);
}

((int, int, int), int) $Wallet$_fun_publicKey((int, int, int) $self) impure inline_ref {
    var (($self'seqno, $self'key, $self'walletId)) = $self;
    return (($self'seqno, $self'key, $self'walletId), $self'key);
}

((int, int, int), int) $Wallet$_fun_walletId((int, int, int) $self) impure inline_ref {
    var (($self'seqno, $self'key, $self'walletId)) = $self;
    return (($self'seqno, $self'key, $self'walletId), $self'walletId);
}

((int, int, int), int) $Wallet$_fun_seqno((int, int, int) $self) impure inline_ref {
    var (($self'seqno, $self'key, $self'walletId)) = $self;
    return (($self'seqno, $self'key, $self'walletId), $self'seqno);
}

;;
;; Receivers of a Contract Wallet
;;

((int, int, int), ()) $Wallet$_internal_text_85d288384c0043458b02803cb22059f68803c553c3656344346468dac961f246((int, int, int) $self) impure inline {
    var ($self'seqno, $self'key, $self'walletId) = $self;
    return (($self'seqno, $self'key, $self'walletId), ());
}

(((int, int, int)), ()) $Wallet$_internal_binary_TransferMessage((int, int, int) $self, (slice, (int, int, slice, int, cell)) $msg) impure inline {
    var ($self'seqno, $self'key, $self'walletId) = $self;
    var ($msg'signature, ($msg'transfer'seqno, $msg'transfer'mode, $msg'transfer'to, $msg'transfer'amount, $msg'transfer'body)) = $msg;
    int $op_hash = cell_hash($Transfer$_store_cell(($msg'transfer'seqno, $msg'transfer'mode, $msg'transfer'to, $msg'transfer'amount, $msg'transfer'body)));
    throw_unless(48401, check_signature($op_hash, $msg'signature, $self'key));
    throw_unless(17654, ($msg'transfer'seqno == $self'seqno));
    $self'seqno = ($self'seqno + 1);
    $global_send($SendParameters$_constructor_value_to_mode_body($msg'transfer'amount, $msg'transfer'to, $msg'transfer'mode, $msg'transfer'body));
    return (($self'seqno, $self'key, $self'walletId), ());
}

((int, int, int), ()) $Wallet$_internal_any((int, int, int) $self, slice $msg) impure inline {
    var ($self'seqno, $self'key, $self'walletId) = $self;
    $self'seqno = ($self'seqno + 1);
    return (($self'seqno, $self'key, $self'walletId), ());
}

(((int, int, int)), ()) %$Wallet$_internal_empty((int, int, int) $self) impure inline {
    var ($self'seqno, $self'key, $self'walletId) = $self;
    $self'seqno = ($self'seqno + 1);
    return (($self'seqno, $self'key, $self'walletId), ());
}

((int, int, int), ()) $Wallet$_internal_text_0e235726108b5700d0369dd7167f6affb806a7e04059375dd0e0fb24971e72b2((int, int, int) $self) impure inline {
    var ($self'seqno, $self'key, $self'walletId) = $self;
    $self'seqno = ($self'seqno + 1);
    return (($self'seqno, $self'key, $self'walletId), ());
}

((int, int, int), ()) $Wallet$_internal_text_269468fd4da0f5e0715746736242eba0fad9d28dafc7733bea9e7c6448889439((int, int, int) $self) impure inline {
    var ($self'seqno, $self'key, $self'walletId) = $self;
    $self'seqno = ($self'seqno + 1);
    return (($self'seqno, $self'key, $self'walletId), ());
}

((int, int, int), ()) $Wallet$_internal_text_9ca0f1855174e32e8fd378df56a6e4f6c40e4dfcb6090e49812f7b1e26214bf9((int, int, int) $self) impure inline {
    var ($self'seqno, $self'key, $self'walletId) = $self;
    var ($walletInit'code, $walletInit'data) = $Wallet$_init_child(__tact_context_sys, $self'key, ($self'walletId + 1));
    return (($self'seqno, $self'key, $self'walletId), ());
}

(((int, int, int)), ()) $Wallet$_receive_binary_bounce_Slice((int, int, int) $self, slice $msg) impure inline {
    var ($self'seqno, $self'key, $self'walletId) = $self;
    var $msg = $msg;
    return (($self'seqno, $self'key, $self'walletId), ());
}

;;
;; Get methods of a Contract Wallet
;;

_ %publicKey() method_id(86520) {
    var self = $Wallet$_contract_load();
    var res = self~$Wallet$_fun_publicKey();
    return res;
}

_ %walletId() method_id(114762) {
    var self = $Wallet$_contract_load();
    var res = self~$Wallet$_fun_walletId();
    return res;
}

_ %seqno() method_id(85143) {
    var self = $Wallet$_contract_load();
    var res = self~$Wallet$_fun_seqno();
    return res;
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128
    );
}

_ get_abi_ipfs() method_id {
    return "ipfs://QmQhNS1nCNEG4QHtX2LY7TqvU7Z11EuP8BWggegGjpkFbC";
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract Wallet
;;

((int, int, int), int) $Wallet$_contract_router_internal((int, int, int) self, int msg_bounced, slice in_msg) impure inline_ref {
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    ;; Handle bounced messages
    if (msg_bounced) {
        ;; Skip 0xFFFFFFFF
        in_msg~skip_bits(32);
        op = in_msg.preload_uint(32);
        
        ;; Bounced handler for [object Object] message (Generic)
        self~$Wallet$_receive_binary_bounce_Slice(in_msg);
        return (self, true);
    }
    
    ;; Receive TransferMessage message
    if (op == 123) {
        var msg = in_msg~$TransferMessage$_load();
        self~$Wallet$_internal_binary_TransferMessage(msg);
        return (self, true);
    }
    
    ;; Receive empty message
    if ((op == 0) & (slice_bits(in_msg) <= 32)) {
        self~%$Wallet$_internal_empty();
        return (self, true);
    }
    
    ;; Text Receivers
    if (op == 0) {
        var text_op = slice_hash(in_msg);
        
        ;; Receive "Deploy" message
        if (text_op == 0x85d288384c0043458b02803cb22059f68803c553c3656344346468dac961f246) {
            self~$Wallet$_internal_text_85d288384c0043458b02803cb22059f68803c553c3656344346468dac961f246();
            return (self, true);
        }
        
        ;; Receive "notify" message
        if (text_op == 0x0e235726108b5700d0369dd7167f6affb806a7e04059375dd0e0fb24971e72b2) {
            self~$Wallet$_internal_text_0e235726108b5700d0369dd7167f6affb806a7e04059375dd0e0fb24971e72b2();
            return (self, true);
        }
        
        ;; Receive "Слава Україні" message
        if (text_op == 0x269468fd4da0f5e0715746736242eba0fad9d28dafc7733bea9e7c6448889439) {
            self~$Wallet$_internal_text_269468fd4da0f5e0715746736242eba0fad9d28dafc7733bea9e7c6448889439();
            return (self, true);
        }
        
        ;; Receive "duplicate" message
        if (text_op == 0x9ca0f1855174e32e8fd378df56a6e4f6c40e4dfcb6090e49812f7b1e26214bf9) {
            self~$Wallet$_internal_text_9ca0f1855174e32e8fd378df56a6e4f6c40e4dfcb6090e49812f7b1e26214bf9();
            return (self, true);
        }
    }
    
    ;; Receiver fallback
    self~$Wallet$_internal_any(in_msg);
    return (self, true);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $Wallet$_contract_load();
    
    ;; Handle operation
    int handled = self~$Wallet$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(handled, 130);
    
    ;; Persist state
    $Wallet$_contract_store(self);
}
