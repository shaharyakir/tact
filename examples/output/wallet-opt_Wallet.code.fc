#include "wallet-opt_Wallet.headers.fc";
#include "wallet-opt_Wallet.stdlib.fc";
#include "wallet-opt_Wallet.storage.fc";

;;
;; Contract Wallet functions
;;

(int, int, int) $Wallet$_contract_init(int $key, int $walletId) impure inline_ref {
    var (($self'seqno, $self'key, $self'walletId)) = (0, null(), null());
    $self'key = $key;
    $self'walletId = $walletId;
    return ($self'seqno, $self'key, $self'walletId);
}

((int, int, int), int) $Wallet$_fun_publicKey((int, int, int) $self) impure inline {
    var (($self'seqno, $self'key, $self'walletId)) = $self;
    return (($self'seqno, $self'key, $self'walletId), $self'key);
}

((int, int, int), int) $Wallet$_fun_walletId((int, int, int) $self) impure inline {
    var (($self'seqno, $self'key, $self'walletId)) = $self;
    return (($self'seqno, $self'key, $self'walletId), $self'walletId);
}

((int, int, int), int) $Wallet$_fun_seqno((int, int, int) $self) impure inline {
    var (($self'seqno, $self'key, $self'walletId)) = $self;
    return (($self'seqno, $self'key, $self'walletId), $self'seqno);
}

;;
;; Receivers of a Contract Wallet
;;

(((int, int, int)), ()) $Wallet$_internal_binary_TransferMessage((int, int, int) $self, (slice, slice) $msg) impure inline {
    var ($self'seqno, $self'key, $self'walletId) = $self;
    var ($msg'signature, $msg'transfer) = $msg;
    int $op_hash = slice_hash($msg'transfer);
    throw_unless(48401, check_signature($op_hash, $msg'signature, $self'key));
    slice $pkg = $msg'transfer;
    int $seqno = $pkg~load_int(32);
    int $mode = $pkg~load_int(8);
    cell $body = $pkg~load_ref();
    throw_unless(17654, ($seqno == $self'seqno));
    $self'seqno = (($self'seqno + 1) % 65536);
    send_raw_message($body, $mode);
    return (($self'seqno, $self'key, $self'walletId), ());
}

;;
;; Get methods of a Contract Wallet
;;

_ %publicKey() method_id(86520) {
    var self = $Wallet$_contract_load();
    var res = self~$Wallet$_fun_publicKey();
    return res;
}

_ %walletId() method_id(114762) {
    var self = $Wallet$_contract_load();
    var res = self~$Wallet$_fun_walletId();
    return res;
}

_ %seqno() method_id(85143) {
    var self = $Wallet$_contract_load();
    var res = self~$Wallet$_fun_seqno();
    return res;
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128
    );
}

_ get_abi_ipfs() method_id {
    return "ipfs://QmXxwx76gr2Troad88JMQgtudyZVU6FZeouhTnekwoumik";
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract Wallet
;;

((int, int, int), int) $Wallet$_contract_router_internal((int, int, int) self, int msg_bounced, slice in_msg) impure inline_ref {
    
    ;; Handle bounced messages
    if (msg_bounced) {
        ;; Skip 0xFFFFFFFF
        in_msg~skip_bits(32);
        
        ;; Parse op
        int op = 0;
        if (slice_bits(in_msg) >= 32) {
            op = in_msg.preload_uint(32);
        }
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    ;; Receive TransferMessage message
    if (op == 3548477446) {
        var msg = in_msg~$TransferMessage$_load();
        self~$Wallet$_internal_binary_TransferMessage(msg);
        return (self, true);
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $Wallet$_contract_load();
    
    ;; Handle operation
    int handled = self~$Wallet$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(handled, 130);
    
    ;; Persist state
    $Wallet$_contract_store(self);
}
