#include "increment_IncrementContract.headers.fc";
#include "increment_IncrementContract.stdlib.fc";
#include "increment_IncrementContract.storage.fc";

;;
;; Contract IncrementContract functions
;;

(cell, cell, cell, cell, cell) $IncrementContract$_contract_init() impure inline_ref {
    var (($self'counters, $self'counters2, $self'counters3, $self'counters4, $self'counters5)) = (null(), null(), null(), null(), null());
    return ($self'counters, $self'counters2, $self'counters3, $self'counters4, $self'counters5);
}

((cell, cell, cell, cell, cell), cell) $IncrementContract$_fun_counters((cell, cell, cell, cell, cell) $self) impure inline_ref {
    var (($self'counters, $self'counters2, $self'counters3, $self'counters4, $self'counters5)) = $self;
    return (($self'counters, $self'counters2, $self'counters3, $self'counters4, $self'counters5), $self'counters);
}

((cell, cell, cell, cell, cell), cell) $IncrementContract$_fun_counters2((cell, cell, cell, cell, cell) $self) impure inline_ref {
    var (($self'counters, $self'counters2, $self'counters3, $self'counters4, $self'counters5)) = $self;
    return (($self'counters, $self'counters2, $self'counters3, $self'counters4, $self'counters5), $self'counters4);
}

;;
;; Receivers of a Contract IncrementContract
;;

(((cell, cell, cell, cell, cell)), ()) $IncrementContract$_internal_binary_Increment((cell, cell, cell, cell, cell) $self, (int, int) $msg) impure inline {
    var ($self'counters, $self'counters2, $self'counters3, $self'counters4, $self'counters5) = $self;
    var ($msg'key, $msg'value) = $msg;
    $self'counters~__tact_dict_set_int_int(257, $msg'key, $msg'value, 257);
    $self'counters4~__tact_dict_set_slice_int(267, __tact_context_get_sender(), $msg'value, 257);
    return (($self'counters, $self'counters2, $self'counters3, $self'counters4, $self'counters5), ());
}

(((cell, cell, cell, cell, cell)), ()) $IncrementContract$_internal_binary_Toggle((cell, cell, cell, cell, cell) $self, (int) $msg) impure inline {
    var ($self'counters, $self'counters2, $self'counters3, $self'counters4, $self'counters5) = $self;
    var ($msg'key) = $msg;
    int $ex = __tact_dict_get_int_int($self'counters2, 257, $msg'key, 1);
    if (null?($ex)) {
        $self'counters2~__tact_dict_set_int_int(257, $msg'key, true, 1);
    } else {
        $self'counters2~__tact_dict_set_int_int(257, $msg'key, (~ __tact_not_null($ex)), 1);
    }
    return (($self'counters, $self'counters2, $self'counters3, $self'counters4, $self'counters5), ());
}

(((cell, cell, cell, cell, cell)), ()) $IncrementContract$_internal_binary_Persist((cell, cell, cell, cell, cell) $self, (int, cell) $msg) impure inline {
    var ($self'counters, $self'counters2, $self'counters3, $self'counters4, $self'counters5) = $self;
    var ($msg'key, $msg'content) = $msg;
    throw_unless(52777, null?(__tact_dict_get_int_cell($self'counters3, 257, $msg'key)));
    $self'counters3~__tact_dict_set_int_cell(257, $msg'key, $msg'content);
    return (($self'counters, $self'counters2, $self'counters3, $self'counters4, $self'counters5), ());
}

(((cell, cell, cell, cell, cell)), ()) $IncrementContract$_internal_binary_Reset((cell, cell, cell, cell, cell) $self, (int) $msg) impure inline {
    var ($self'counters, $self'counters2, $self'counters3, $self'counters4, $self'counters5) = $self;
    var ($msg'key) = $msg;
    $self'counters~__tact_dict_set_int_int(257, $msg'key, null(), 257);
    $self'counters2~__tact_dict_set_int_int(257, $msg'key, null(), 1);
    $self'counters3~__tact_dict_set_int_cell(257, $msg'key, null());
    $self'counters4~__tact_dict_set_slice_int(267, __tact_context_get_sender(), null(), 257);
    $self'counters5~__tact_dict_set_int_cell(257, $msg'key, $Something$_store_opt(null()));
    return (($self'counters, $self'counters2, $self'counters3, $self'counters4, $self'counters5), ());
}

(((cell, cell, cell, cell, cell)), ()) $IncrementContract$_internal_binary_Deploy((cell, cell, cell, cell, cell) $self, (int) $deploy) impure inline {
    var ($self'counters, $self'counters2, $self'counters3, $self'counters4, $self'counters5) = $self;
    var ($deploy'queryId) = $deploy;
    $global_reply($DeployOk$_store_cell($DeployOk$_constructor_queryId($deploy'queryId)));
    return (($self'counters, $self'counters2, $self'counters3, $self'counters4, $self'counters5), ());
}

;;
;; Get methods of a Contract IncrementContract
;;

_ %counters() method_id(95239) {
    var self = $IncrementContract$_contract_load();
    var res = self~$IncrementContract$_fun_counters();
    return res;
}

_ %counters2() method_id(77570) {
    var self = $IncrementContract$_contract_load();
    var res = self~$IncrementContract$_fun_counters2();
    return res;
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128
    );
}

_ get_abi_ipfs() method_id {
    return "ipfs://QmTNCCDQjZp6cKGJHhyMtNbku8yrbDG2FDqKfdYsfVLkMU";
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract IncrementContract
;;

((cell, cell, cell, cell, cell), int) $IncrementContract$_contract_router_internal((cell, cell, cell, cell, cell) self, int msg_bounced, slice in_msg) impure inline_ref {
    
    ;; Handle bounced messages
    if (msg_bounced) {
        ;; Skip 0xFFFFFFFF
        in_msg~skip_bits(32);
        
        ;; Parse op
        int op = 0;
        if (slice_bits(in_msg) >= 32) {
            op = in_msg.preload_uint(32);
        }
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    ;; Receive Increment message
    if (op == 537284411) {
        var msg = in_msg~$Increment$_load();
        self~$IncrementContract$_internal_binary_Increment(msg);
        return (self, true);
    }
    
    ;; Receive Toggle message
    if (op == 1081595080) {
        var msg = in_msg~$Toggle$_load();
        self~$IncrementContract$_internal_binary_Toggle(msg);
        return (self, true);
    }
    
    ;; Receive Persist message
    if (op == 3801943978) {
        var msg = in_msg~$Persist$_load();
        self~$IncrementContract$_internal_binary_Persist(msg);
        return (self, true);
    }
    
    ;; Receive Reset message
    if (op == 1718153138) {
        var msg = in_msg~$Reset$_load();
        self~$IncrementContract$_internal_binary_Reset(msg);
        return (self, true);
    }
    
    ;; Receive Deploy message
    if (op == 2490013878) {
        var msg = in_msg~$Deploy$_load();
        self~$IncrementContract$_internal_binary_Deploy(msg);
        return (self, true);
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $IncrementContract$_contract_load();
    
    ;; Handle operation
    int handled = self~$IncrementContract$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(handled, 130);
    
    ;; Persist state
    $IncrementContract$_contract_store(self);
}
