#include "payouts_Beacon.headers.fc";
#include "payouts_Beacon.stdlib.fc";
#include "payouts_Beacon.storage.fc";

;;
;; Contract Beacon functions
;;

(slice, slice, int) $Beacon$_contract_init(slice $master, slice $owner) impure inline_ref {
    var (($self'master, $self'owner, $self'completed)) = (null(), null(), null());
    $self'master = $master;
    $self'owner = $owner;
    $self'completed = false;
    return ($self'master, $self'owner, $self'completed);
}

((slice, slice, int), slice) $Beacon$_fun_owner((slice, slice, int) $self) impure inline_ref {
    var (($self'master, $self'owner, $self'completed)) = $self;
    return (($self'master, $self'owner, $self'completed), $self'owner);
}

;;
;; Receivers of a Contract Beacon
;;

(((slice, slice, int)), ()) $Beacon$_internal_binary_CanPayout((slice, slice, int) $self, (int) $msg) impure inline {
    var ($self'master, $self'owner, $self'completed) = $self;
    var ($msg'amount) = $msg;
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    throw_unless(4429, ( __tact_slice_eq_bits($self'master, $ctx'sender) ));
    raw_reserve(100000000, 0);
    if ($self'completed) {
        $self'completed = true;
        $global_reply($CanPayoutResponse$_store_cell($CanPayoutResponse$_constructor_ok_amount_address(true, $msg'amount, $self'owner)));
    } else {
        $global_reply($CanPayoutResponse$_store_cell($CanPayoutResponse$_constructor_ok_amount_address(false, $msg'amount, $self'owner)));
    }
    return (($self'master, $self'owner, $self'completed), ());
}

(((slice, slice, int)), ()) $Beacon$_receive_binary_bounce_Slice((slice, slice, int) $self, slice $msg) impure inline {
    var ($self'master, $self'owner, $self'completed) = $self;
    var $msg = $msg;
    $self'completed = false;
    return (($self'master, $self'owner, $self'completed), ());
}

;;
;; Get methods of a Contract Beacon
;;

_ %owner() method_id(83229) {
    var self = $Beacon$_contract_load();
    var res = self~$Beacon$_fun_owner();
    return res;
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128,
        "org.ton.ownable"H >> 128
    );
}

_ get_abi_ipfs() method_id {
    return "ipfs://QmV2FxwBviu4Z1CQRGaub9TuZqdg6ghLhzd5QDkHYf6AbG";
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract Beacon
;;

((slice, slice, int), int) $Beacon$_contract_router_internal((slice, slice, int) self, int msg_bounced, slice in_msg) impure inline_ref {
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    ;; Handle bounced messages
    if (msg_bounced) {
        ;; Skip 0xFFFFFFFF
        in_msg~skip_bits(32);
        op = in_msg.preload_uint(32);
        
        ;; Bounced handler for [object Object] message (Generic)
        self~$Beacon$_receive_binary_bounce_Slice(in_msg);
        return (self, true);
    }
    
    ;; Receive CanPayout message
    if (op == 3289991647) {
        var msg = in_msg~$CanPayout$_load();
        self~$Beacon$_internal_binary_CanPayout(msg);
        return (self, true);
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $Beacon$_contract_load();
    
    ;; Handle operation
    int handled = self~$Beacon$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(handled, 130);
    
    ;; Persist state
    $Beacon$_contract_store(self);
}
