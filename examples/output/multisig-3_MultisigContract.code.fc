#include "multisig-3_MultisigContract.headers.fc";
#include "multisig-3_MultisigContract.stdlib.fc";
#include "multisig-3_MultisigContract.storage.fc";

;;
;; Contract MultisigContract functions
;;

(int, int, int, int) $MultisigContract$_contract_init(int $key1, int $key2, int $key3) impure inline_ref {
    var (($self'seqno, $self'user1_key, $self'user2_key, $self'user3_key)) = (0, null(), null(), null());
    $self'user1_key = $key1;
    $self'user2_key = $key2;
    $self'user3_key = $key3;
    return ($self'seqno, $self'user1_key, $self'user2_key, $self'user3_key);
}

((int, int, int, int), ()) $MultisigContract$_fun_execute((int, int, int, int) $self, (int, int, slice) $op) impure inline_ref {
    var (($self'seqno, $self'user1_key, $self'user2_key, $self'user3_key)) = $self;
    var (($op'seqno, $op'amount, $op'target)) = $op;
    $global_send($SendParameters$_constructor_to_value($op'target, $op'amount));
    return (($self'seqno, $self'user1_key, $self'user2_key, $self'user3_key), ());
}

((int, int, int, int), int) $MultisigContract$_fun_key1((int, int, int, int) $self) impure inline_ref {
    var (($self'seqno, $self'user1_key, $self'user2_key, $self'user3_key)) = $self;
    return (($self'seqno, $self'user1_key, $self'user2_key, $self'user3_key), $self'user1_key);
}

((int, int, int, int), int) $MultisigContract$_fun_key2((int, int, int, int) $self) impure inline_ref {
    var (($self'seqno, $self'user1_key, $self'user2_key, $self'user3_key)) = $self;
    return (($self'seqno, $self'user1_key, $self'user2_key, $self'user3_key), $self'user2_key);
}

((int, int, int, int), int) $MultisigContract$_fun_key3((int, int, int, int) $self) impure inline_ref {
    var (($self'seqno, $self'user1_key, $self'user2_key, $self'user3_key)) = $self;
    return (($self'seqno, $self'user1_key, $self'user2_key, $self'user3_key), $self'user3_key);
}

((int, int, int, int), int) $MultisigContract$_fun_seqno((int, int, int, int) $self) impure inline_ref {
    var (($self'seqno, $self'user1_key, $self'user2_key, $self'user3_key)) = $self;
    return (($self'seqno, $self'user1_key, $self'user2_key, $self'user3_key), $self'seqno);
}

;;
;; Receivers of a Contract MultisigContract
;;

((int, int, int, int), ()) $MultisigContract$_internal_text_85d288384c0043458b02803cb22059f68803c553c3656344346468dac961f246((int, int, int, int) $self) impure inline {
    var ($self'seqno, $self'user1_key, $self'user2_key, $self'user3_key) = $self;
    return (($self'seqno, $self'user1_key, $self'user2_key, $self'user3_key), ());
}

(((int, int, int, int)), ()) $MultisigContract$_internal_binary_Execute((int, int, int, int) $self, ((int, int, slice), slice, slice, slice) $msg) impure inline {
    var ($self'seqno, $self'user1_key, $self'user2_key, $self'user3_key) = $self;
    var (($msg'operation'seqno, $msg'operation'amount, $msg'operation'target), $msg'signature1, $msg'signature2, $msg'signature3) = $msg;
    int $op_hash = cell_hash($Operation$_store_cell(($msg'operation'seqno, $msg'operation'amount, $msg'operation'target)));
    int $ok1 = check_signature($op_hash, $msg'signature1, $self'user1_key);
    int $ok2 = check_signature($op_hash, $msg'signature2, $self'user2_key);
    int $ok3 = check_signature($op_hash, $msg'signature3, $self'user3_key);
    throw_unless(17654, ($msg'operation'seqno == $self'seqno));
    throw_unless(48401, ( (( ($ok1) ? ($ok2) : (false) )) ? ($ok3) : (false) ));
    ($self'seqno, $self'user1_key, $self'user2_key, $self'user3_key)~$MultisigContract$_fun_execute($Operation$_tensor_cast(($msg'operation'seqno, $msg'operation'amount, $msg'operation'target)));
    return (($self'seqno, $self'user1_key, $self'user2_key, $self'user3_key), ());
}

;;
;; Get methods of a Contract MultisigContract
;;

_ %key1() method_id(107493) {
    var self = $MultisigContract$_contract_load();
    var res = self~$MultisigContract$_fun_key1();
    return res;
}

_ %key2() method_id(103302) {
    var self = $MultisigContract$_contract_load();
    var res = self~$MultisigContract$_fun_key2();
    return res;
}

_ %key3() method_id(99239) {
    var self = $MultisigContract$_contract_load();
    var res = self~$MultisigContract$_fun_key3();
    return res;
}

_ %seqno() method_id(85143) {
    var self = $MultisigContract$_contract_load();
    var res = self~$MultisigContract$_fun_seqno();
    return res;
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128
    );
}

_ get_abi_ipfs() method_id {
    return "ipfs://QmZgQBkpPYK7oYMNVZxUfe4csDsAXdB5nY9DEHspBf6Go9";
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract MultisigContract
;;

((int, int, int, int), int) $MultisigContract$_contract_router_internal((int, int, int, int) self, int msg_bounced, slice in_msg) impure inline_ref {
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    ;; Handle bounced messages
    if (msg_bounced) {
        ;; Skip 0xFFFFFFFF
        in_msg~skip_bits(32);
        op = in_msg.preload_uint(32);
        return (self, true);
    }
    
    ;; Receive Execute message
    if (op == 520967536) {
        var msg = in_msg~$Execute$_load();
        self~$MultisigContract$_internal_binary_Execute(msg);
        return (self, true);
    }
    
    ;; Text Receivers
    if (op == 0) {
        var text_op = slice_hash(in_msg);
        
        ;; Receive "Deploy" message
        if (text_op == 0x85d288384c0043458b02803cb22059f68803c553c3656344346468dac961f246) {
            self~$MultisigContract$_internal_text_85d288384c0043458b02803cb22059f68803c553c3656344346468dac961f246();
            return (self, true);
        }
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $MultisigContract$_contract_load();
    
    ;; Handle operation
    int handled = self~$MultisigContract$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(handled, 130);
    
    ;; Persist state
    $MultisigContract$_contract_store(self);
}
