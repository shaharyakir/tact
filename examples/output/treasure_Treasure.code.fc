#include "treasure_Treasure.headers.fc";
#include "treasure_Treasure.stdlib.fc";
#include "treasure_Treasure.storage.fc";

;;
;; Contract Treasure functions
;;

(slice) $Treasure$_contract_init(slice $owner) impure inline_ref {
    var (($self'owner)) = (null());
    $self'owner = $owner;
    return ($self'owner);
}

((slice), ()) $Treasure$_fun_requireOwner((slice) $self) impure inline_ref {
    var (($self'owner)) = $self;
    throw_unless(132, ( __tact_slice_eq_bits($self'owner, __tact_context_get_sender()) ));
    return (($self'owner), ());
}

((slice), ()) $Treasure$_fun_doWithdraw((slice) $self, int $amount, int $mode) impure inline_ref {
    var (($self'owner)) = $self;
    ($self'owner)~$Treasure$_fun_requireOwner();
    $global_send($SendParameters$_constructor_value_to_mode_body($amount, $self'owner, $mode, end_cell(begin_cell())));
    return (($self'owner), ());
}

((slice), slice) $Treasure$_fun_owner((slice) $self) impure inline_ref {
    var (($self'owner)) = $self;
    return (($self'owner), $self'owner);
}

;;
;; Receivers of a Contract Treasure
;;

(((slice)), ()) $Treasure$_internal_binary_Withdraw((slice) $self, (int, int) $msg) impure inline {
    var ($self'owner) = $self;
    var ($msg'amount, $msg'mode) = $msg;
    ($self'owner)~$Treasure$_fun_doWithdraw($msg'amount, $msg'mode);
    return (($self'owner), ());
}

((slice), ()) $Treasure$_internal_text_986c2ba124bb9287eb4a0bd8d3104e1c0067a3c93952d889c74d08185bd30d4d((slice) $self) impure inline {
    var ($self'owner) = $self;
    ($self'owner)~$Treasure$_fun_doWithdraw(0, (32 + 128));
    return (($self'owner), ());
}

(((slice)), ()) $Treasure$_internal_binary_ChangeOwner((slice) $self, (slice) $msg) impure inline {
    var ($self'owner) = $self;
    var ($msg'newOwner) = $msg;
    ($self'owner)~$Treasure$_fun_requireOwner();
    $self'owner = $msg'newOwner;
    return (($self'owner), ());
}

;;
;; Get methods of a Contract Treasure
;;

_ %owner() method_id(83229) {
    var self = $Treasure$_contract_load();
    var res = self~$Treasure$_fun_owner();
    return res;
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128,
        "org.ton.ownable.transferable"H >> 128,
        "org.ton.ownable"H >> 128
    );
}

_ get_abi_ipfs() method_id {
    return "ipfs://QmT8hcgWSSoJ98BazuBLkc8eZEd5iLMfEHaMUWNZgwd69D";
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract Treasure
;;

((slice), int) $Treasure$_contract_router_internal((slice) self, int msg_bounced, slice in_msg) impure inline_ref {
    
    if (msg_bounced) {
        ;; Skip 0xFFFFFFFF
        in_msg~skip_bits(32);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Receive Withdraw message
    if (op == 1672521544) {
        var msg = in_msg~$Withdraw$_load();
        self~$Treasure$_internal_binary_Withdraw(msg);
        return (self, true);
    }
    
    ;; Receive ChangeOwner message
    if (op == 256331011) {
        var msg = in_msg~$ChangeOwner$_load();
        self~$Treasure$_internal_binary_ChangeOwner(msg);
        return (self, true);
    }
    
    ;; Text Receivers
    if (op == 0) {
        var text_op = slice_hash(in_msg);
        
        ;; Receive "Destroy" message
        if (text_op == 0x986c2ba124bb9287eb4a0bd8d3104e1c0067a3c93952d889c74d08185bd30d4d) {
            self~$Treasure$_internal_text_986c2ba124bb9287eb4a0bd8d3104e1c0067a3c93952d889c74d08185bd30d4d();
            return (self, true);
        }
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $Treasure$_contract_load();
    
    ;; Handle operation
    int handled = self~$Treasure$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(handled, 130);
    
    ;; Persist state
    $Treasure$_contract_store(self);
}
