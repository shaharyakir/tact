#include "external_External.headers.fc";
#include "external_External.stdlib.fc";
#include "external_External.storage.fc";

;;
;; Contract External functions
;;

(slice, int) $External$_contract_init(slice $owner) impure inline_ref {
    var (($self'owner, $self'timeout)) = (null(), null());
    $self'owner = $owner;
    $self'timeout = (now() + (5 * 60));
    return ($self'owner, $self'timeout);
}

((slice, int), slice) $External$_fun_owner((slice, int) $self) impure inline_ref {
    var (($self'owner, $self'timeout)) = $self;
    return (($self'owner, $self'timeout), $self'owner);
}

;;
;; Receivers of a Contract External
;;

((slice, int), ()) $External$_internal_text_fb5afb2314c4a83f630eee3abd1bb27a6dd574bdc82ce83a9b5a388ebe7a2be8((slice, int) $self) impure inline {
    var ($self'owner, $self'timeout) = $self;
    return (($self'owner, $self'timeout), ());
}

((slice, int), ()) $External$_external_text_c3c1f3e19ef67964f6f1da1ad85bd08b35f8b02ffb881418fb6c1fb3b468d462((slice, int) $self) impure inline {
    var ($self'owner, $self'timeout) = $self;
    if ((now() > $self'timeout)) {
        accept_message();
    }
    return (($self'owner, $self'timeout), ());
}

(((slice, int)), ()) $External$_internal_binary_Deploy((slice, int) $self, (int) $deploy) impure inline {
    var ($self'owner, $self'timeout) = $self;
    var ($deploy'queryId) = $deploy;
    $global_reply($DeployOk$_store_cell($DeployOk$_constructor_queryId($deploy'queryId)));
    return (($self'owner, $self'timeout), ());
}

;;
;; Get methods of a Contract External
;;

_ %owner() method_id(83229) {
    var self = $External$_contract_load();
    var res = self~$External$_fun_owner();
    return res;
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128,
        "org.ton.ownable"H >> 128
    );
}

_ get_abi_ipfs() method_id {
    return "ipfs://QmdFQrk5qx9qxTbfCoxTkKT1GxahhpZ992zqDfA7d8NjP3";
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract External
;;

((slice, int), int) $External$_contract_router_internal((slice, int) self, int msg_bounced, slice in_msg) impure inline_ref {
    
    if (msg_bounced) {
        ;; Skip 0xFFFFFFFF
        in_msg~skip_bits(32);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Receive Deploy message
    if (op == 2490013878) {
        var msg = in_msg~$Deploy$_load();
        self~$External$_internal_binary_Deploy(msg);
        return (self, true);
    }
    
    ;; Text Receivers
    if (op == 0) {
        var text_op = slice_hash(in_msg);
        
        ;; Receive "Topup" message
        if (text_op == 0xfb5afb2314c4a83f630eee3abd1bb27a6dd574bdc82ce83a9b5a388ebe7a2be8) {
            self~$External$_internal_text_fb5afb2314c4a83f630eee3abd1bb27a6dd574bdc82ce83a9b5a388ebe7a2be8();
            return (self, true);
        }
    }
    
    return (self, false);
}

((slice, int), int) $External$_contract_router_external((slice, int) self, slice in_msg) impure inline_ref {
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Text Receivers
    if (op == 0) {
        var text_op = slice_hash(in_msg);
        
        ;; Receive "Timeout" message
        if (text_op == 0xc3c1f3e19ef67964f6f1da1ad85bd08b35f8b02ffb881418fb6c1fb3b468d462) {
            self~$External$_external_text_c3c1f3e19ef67964f6f1da1ad85bd08b35f8b02ffb881418fb6c1fb3b468d462();
            return (self, true);
        }
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $External$_contract_load();
    
    ;; Handle operation
    int handled = self~$External$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(handled, 130);
    
    ;; Persist state
    $External$_contract_store(self);
}

() recv_external(slice in_msg) impure {
    ;; Load contract data
    var self = $External$_contract_load();
    
    ;; Handle operation
    int handled = self~$External$_contract_router_external(in_msg);
    
    ;; Throw if not handled
    throw_unless(handled, 130);
    
    ;; Persist state
    $External$_contract_store(self);
}
