;;
;; Header files for Payouts
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_verify_address
slice __tact_verify_address(slice address) inline;

;; __tact_load_address
(slice, slice) __tact_load_address(slice cs) inline;

;; __tact_store_address
builder __tact_store_address(builder b, slice address) inline;

;; __tact_create_address
slice __tact_create_address(int chain, int hash) inline;

;; __tact_compute_contract_address
slice __tact_compute_contract_address(int chain, cell code, cell data) inline;

;; __tact_my_balance
int __tact_my_balance() inline;

;; __tact_not_null
forall X -> X __tact_not_null(X x) inline;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; __tact_store_bool
builder __tact_store_bool(builder b, int v) inline;

;; __tact_slice_eq_bits
int __tact_slice_eq_bits(slice a, slice b) inline;

;; __tact_dict_set_code
cell __tact_dict_set_code(cell dict, int id, cell code) inline;

;; __tact_dict_get_code
cell __tact_dict_get_code(cell dict, int id) inline;

;; $ChangeOwner$_load
(slice, ((slice))) $ChangeOwner$_load(slice sc_0) inline;

;; $CanPayout$_store
builder $CanPayout$_store(builder build_0, (int) v) inline;

;; $CanPayout$_store_cell
cell $CanPayout$_store_cell((int) v) inline;

;; $CanPayoutResponse$_load
(slice, ((int, slice, int))) $CanPayoutResponse$_load(slice sc_0) inline;

;; $Payouts$_store
builder $Payouts$_store(builder build_0, (slice, int) v) inline;

;; $Payouts$_load
(slice, ((slice, int))) $Payouts$_load(slice sc_0) inline;

;; $Beacon$init$_store
builder $Beacon$init$_store(builder build_0, (slice, slice) v) inline;

;; $Payouts$init$_load
(slice, ((slice, int))) $Payouts$init$_load(slice sc_0) inline;

;; $Payouts$_contract_init
(slice, int) $Payouts$_contract_init(slice $owner, int $publicKey) impure inline_ref;

;; $Payouts$_contract_load
(slice, int) $Payouts$_contract_load() impure inline_ref;

;; $Payouts$_contract_store
() $Payouts$_contract_store((slice, int) v) impure inline;

;; $global_contractAddress
slice $global_contractAddress((cell, cell) $s) impure inline;

;; $global_send
() $global_send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref;

;; $Builder$_fun_asSlice
slice $Builder$_fun_asSlice(builder $self) impure inline;

;; $Builder$_fun_asCell
cell $Builder$_fun_asCell(builder $self) impure inline;

;; $Slice$_fun_fromBase64
slice $Slice$_fun_fromBase64(slice $self) impure inline_ref;

;; $String$_fun_fromBase64
slice $String$_fun_fromBase64(slice $self) impure inline;

;; $Beacon$_init_child
(cell, cell) $Beacon$_init_child(cell sys', slice $master, slice $owner) inline_ref;

;; $Payouts$_fun_requireOwner
((slice, int), ()) $Payouts$_fun_requireOwner((slice, int) $self) impure inline_ref;

;; $Payouts$_fun_owner
((slice, int), slice) $Payouts$_fun_owner((slice, int) $self) impure inline_ref;

;; $SendParameters$_constructor_to_value_mode_bounce_body
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode_bounce_body(slice to, int value, int mode, int bounce, cell body) inline;

;; $CanPayout$_constructor_amount
((int)) $CanPayout$_constructor_amount(int amount) inline;
