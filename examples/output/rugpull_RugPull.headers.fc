;;
;; Header files for RugPull
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_verify_address
slice __tact_verify_address(slice address) inline;

;; __tact_load_address
(slice, slice) __tact_load_address(slice cs) inline;

;; __tact_store_address
builder __tact_store_address(builder b, slice address) inline;

;; __tact_not_null
forall X -> X __tact_not_null(X x) inline;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; __tact_store_bool
builder __tact_store_bool(builder b, int v) inline;

;; __tact_dict_set_int_slice
(cell, ()) __tact_dict_set_int_slice(cell d, int kl, int k, slice v) inline;

;; __tact_dict_get_int_slice
slice __tact_dict_get_int_slice(cell d, int kl, int k) inline;

;; __tact_slice_eq_bits
int __tact_slice_eq_bits(slice a, slice b) inline;

;; $ChangeOwner$_load
(slice, ((slice))) $ChangeOwner$_load(slice sc_0) inline;

;; $RugPull$_store
builder $RugPull$_store(builder build_0, (slice, int, int, int, int, int, int, int, int, cell) v) inline;

;; $RugPull$_load
(slice, ((slice, int, int, int, int, int, int, int, int, cell))) $RugPull$_load(slice sc_0) inline;

;; $RugParams$_to_external
(int, int, int) $RugParams$_to_external(((int, int, int)) v) inline;

;; $RugPull$init$_load
(slice, ((slice, int, int, int))) $RugPull$init$_load(slice sc_0) inline;

;; $RugPull$_contract_init
(slice, int, int, int, int, int, int, int, int, cell) $RugPull$_contract_init(slice $owner, int $investment, int $returns, int $fee) impure inline_ref;

;; $RugPull$_contract_load
(slice, int, int, int, int, int, int, int, int, cell) $RugPull$_contract_load() impure inline_ref;

;; $RugPull$_contract_store
() $RugPull$_contract_store((slice, int, int, int, int, int, int, int, int, cell) v) impure inline;

;; $global_send
() $global_send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref;

;; $SendParameters$_constructor_bounce_to_value_mode_body
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body(int bounce, slice to, int value, int mode, cell body) inline;

;; $global_reply
() $global_reply(cell $body) impure inline;

;; $SendParameters$_constructor_value_to_mode
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_value_to_mode(int value, slice to, int mode) inline;

;; $RugPull$_fun_sendPayout
((slice, int, int, int, int, int, int, int, int, cell), ()) $RugPull$_fun_sendPayout((slice, int, int, int, int, int, int, int, int, cell) $self, slice $to, int $value) impure inline_ref;

;; $RugParams$_constructor_investment_returns_fee
((int, int, int)) $RugParams$_constructor_investment_returns_fee(int investment, int returns, int fee) inline;

;; $RugPull$_fun_params
((slice, int, int, int, int, int, int, int, int, cell), (int, int, int)) $RugPull$_fun_params((slice, int, int, int, int, int, int, int, int, cell) $self) impure inline_ref;

;; $RugPull$_fun_requireOwner
((slice, int, int, int, int, int, int, int, int, cell), ()) $RugPull$_fun_requireOwner((slice, int, int, int, int, int, int, int, int, cell) $self) impure inline_ref;

;; $RugPull$_fun_owner
((slice, int, int, int, int, int, int, int, int, cell), slice) $RugPull$_fun_owner((slice, int, int, int, int, int, int, int, int, cell) $self) impure inline_ref;

;; $RugPull$_fun_requireNotStopped
((slice, int, int, int, int, int, int, int, int, cell), ()) $RugPull$_fun_requireNotStopped((slice, int, int, int, int, int, int, int, int, cell) $self) impure inline_ref;

;; $RugPull$_fun_stopped
((slice, int, int, int, int, int, int, int, int, cell), int) $RugPull$_fun_stopped((slice, int, int, int, int, int, int, int, int, cell) $self) impure inline_ref;
