// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`resolveStatements should fail statements for case-0 1`] = `
"<unknown>:5:5: Type mismatch: Int is not assignable to Bool
Line 5, col 5:
  4 | fun isZero(x: Int): Bool {
> 5 |     return x;
          ^~~~~~~~~
  6 | }
"
`;

exports[`resolveStatements should fail statements for case-1 1`] = `
"<unknown>:5:5: Type mismatch: Bool is not assignable to Int
Line 5, col 5:
  4 | fun isZero(x: Int): Bool {
> 5 |     repeat(true) {
          ^~~~~~~~~~~~~~
  6 |         x = x + 1;
"
`;

exports[`resolveStatements should fail statements for case-2 1`] = `
"<unknown>:5:5: Type mismatch: Int is not assignable to bool
Line 5, col 5:
  4 | fun isZero(x: Int): Bool {
> 5 |     while(x) {
          ^~~~~~~~~~
  6 |         x = x + 1;
"
`;

exports[`resolveStatements should fail statements for case-3 1`] = `
"<unknown>:5:5: Type mismatch: Int is not assignable to bool
Line 5, col 5:
  4 | fun isZero(x: Int): Bool {
> 5 |     do {
          ^~~~
  6 |         x = x + 1;
"
`;

exports[`resolveStatements should fail statements for case-4 1`] = `
"<unknown>:5:5: Type mismatch: Int is not assignable to Bool
Line 5, col 5:
  4 | fun isZero(x: Int): Bool {
> 5 |     if (x) {
          ^~~~~~~~
  6 |         x = x + 1;
"
`;

exports[`resolveStatements should fail statements for case-5 1`] = `
"<unknown>:5:5: Type mismatch: String is not assignable to Int
Line 5, col 5:
  4 | fun isZero(x: Int): Bool {
> 5 |     x = "hello world";
          ^~~~~~~~~~~~~~~~~~
  6 |     return true;
"
`;

exports[`resolveStatements should fail statements for case-6 1`] = `
"<unknown>:9:12: Function "f1" expects 2 arguments, got 1
Line 9, col 12:
   8 | fun f2(a: Int): Int {
>  9 |     return f1(a);
                  ^~~~~
  10 | }
"
`;

exports[`resolveStatements should fail statements for case-7 1`] = `
"<unknown>:16:16: Function "f1" expects 2 arguments, got 1
Line 16, col 16:
  15 |     fun f2(a: Int): Int {
> 16 |         return self.f1(a);
                      ^~~~~~~~~~
  17 |     }
"
`;

exports[`resolveStatements should fail statements for case-8 1`] = `
"<unknown>:9:18: Invalid type "Bool" for argument "b"
Line 9, col 18:
   8 | fun f2(a: Int): Int {
>  9 |     return f1(a, true);
                        ^~~~
  10 | }
"
`;

exports[`resolveStatements should fail statements for case-9 1`] = `
"<unknown>:16:27: Invalid type "Bool" for argument "b"
Line 16, col 27:
  15 |     fun f2(a: Int): Int {
> 16 |         return self.f1(a, true);
                                 ^~~~
  17 |     }
"
`;

exports[`resolveStatements should fail statements for case-10 1`] = `
"<unknown>:6:5: Type mismatch: Int is not assignable to Bool
Line 6, col 5:
  5 |     let a: Int = 0;
> 6 |     let b: Bool = 0;
          ^~~~~~~~~~~~~~~~
  7 | }
"
`;

exports[`resolveStatements should fail statements for case-11 1`] = `
"<unknown>:13:9: Invalid type "Bool" for fields "b" with type Int in type SomeStruct
Line 13, col 9:
  12 |         a: 1,
> 13 |         b: false // Invalid type
               ^~~~~~~~
  14 |     };
"
`;

exports[`resolveStatements should fail statements for case-12 1`] = `
"<unknown>:13:9: Duplicate fields "a"
Line 13, col 9:
  12 |         a: 1,
> 13 |         a: 2,
               ^~~~
  14 |         b: 3
"
`;

exports[`resolveStatements should fail statements for case-13 1`] = `
"<unknown>:12:25: Missing fields "c" in type SomeStruct
Line 12, col 25:
  11 | fun main() {
> 12 |     let a: SomeStruct = SomeStruct{
                               ^~~~~~~~~~~
  13 |         a: 1,
"
`;

exports[`resolveStatements should fail statements for case-14 1`] = `
"<unknown>:22:25: Invalid type "String" for argument "owner"
Line 22, col 25:
  21 |     get fun newInit(): StateInit {
> 22 |         return initOf A("hello");
                               ^~~~~~~
  23 |     }
"
`;

exports[`resolveStatements should fail statements for case-15 1`] = `
"<unknown>:6:5: Field value is not set
Line 6, col 5:
  5 |     value: Int;
> 6 |     init() {
          ^~~~~~~~
  7 | 
"
`;

exports[`resolveStatements should fail statements for case-16 1`] = `
"<unknown>:6:5: Field value is not set
Line 6, col 5:
  5 |     value: Int;
> 6 |     init(arg: Bool) {
          ^~~~~~~~~~~~~~~~~
  7 |         if (arg) {
"
`;

exports[`resolveStatements should fail statements for case-17 1`] = `
"<unknown>:6:5: Field value is not set
Line 6, col 5:
  5 |     value: Int;
> 6 |     init(arg: Bool) {
          ^~~~~~~~~~~~~~~~~
  7 |         if (arg) {
"
`;

exports[`resolveStatements should fail statements for case-18 1`] = `
"<unknown>:6:5: Field value is not set
Line 6, col 5:
  5 |     value: Int;
> 6 |     init(arg: Bool) {
          ^~~~~~~~~~~~~~~~~
  7 |         if (arg) {
"
`;

exports[`resolveStatements should fail statements for case-19 1`] = `
"<unknown>:8:22: Field "value2" is not initialized
Line 8, col 22:
  7 |     init(arg: Bool) {
> 8 |         self.value = self.value2 + 1;
                           ^~~~~~~~~~~
  9 |         self.value2 = 10;
"
`;

exports[`resolveStatements should fail statements for case-20 1`] = `
"<unknown>:13:22: Field "value2" is not initialized
Line 13, col 22:
  12 |     init(arg: Bool) {
> 13 |         self.value = self.value2.a + 1;
                            ^~~~~~~~~~~
  14 |         self.value2 = A{ a: 1, b: 2 };
"
`;

exports[`resolveStatements should fail statements for case-21 1`] = `
"<unknown>:13:35: Field "value" is not initialized
Line 13, col 35:
  12 |     init(arg: Bool) {
> 13 |         self.value2 = A{ a: 1, b: self.value };
                                         ^~~~~~~~~~
  14 |         self.value = self.value2.a + 1;
"
`;

exports[`resolveStatements should fail statements for case-22 1`] = `
"<unknown>:12:9: Cannot access self before init
Line 12, col 9:
  11 |     init(arg: Bool) {
> 12 |         self.update();
               ^~~~~~~~~~~~~
  13 |         self.value = 1;
"
`;

exports[`resolveStatements should fail statements for case-23 1`] = `
"<unknown>:19:18: Type "A" does not have a field named "c"
Line 19, col 18:
  18 |     let y: Bool = src.b;
> 19 |     let z: Int = src.c;
                        ^~~~~
  20 |   }
"
`;

exports[`resolveStatements should resolve statements for case-0 1`] = `
[
  [
    "x",
    "Int",
  ],
  [
    "0",
    "Int",
  ],
  [
    "x == 0",
    "Bool",
  ],
]
`;

exports[`resolveStatements should resolve statements for case-1 1`] = `
[
  [
    "123",
    "Int",
  ],
  [
    "10",
    "Int",
  ],
  [
    "123 + 10",
    "Int",
  ],
  [
    "x",
    "Int",
  ],
  [
    "123 + 10 == x",
    "Bool",
  ],
]
`;

exports[`resolveStatements should resolve statements for case-2 1`] = `
[
  [
    "123",
    "Int",
  ],
  [
    "10",
    "Int",
  ],
  [
    "123 + 10",
    "Int",
  ],
  [
    "10",
    "Int",
  ],
  [
    "(123 + 10) / 10",
    "Int",
  ],
  [
    "x",
    "Int",
  ],
  [
    "(123 + 10) / 10 == x",
    "Bool",
  ],
  [
    "y",
    "Int",
  ],
  [
    "0",
    "Int",
  ],
  [
    "y > 0",
    "Bool",
  ],
  [
    "(123 + 10) / 10 == x && y > 0",
    "Bool",
  ],
  [
    "z",
    "Bool",
  ],
  [
    "(123 + 10) / 10 == x && y > 0 || z",
    "Bool",
  ],
]
`;

exports[`resolveStatements should resolve statements for case-3 1`] = `
[
  [
    "x",
    "Int",
  ],
  [
    "y",
    "Int",
  ],
  [
    "x + y",
    "Int",
  ],
  [
    "b",
    "Int",
  ],
  [
    "b",
    "Int",
  ],
  [
    "1",
    "Int",
  ],
  [
    "b + 1",
    "Int",
  ],
  [
    "b",
    "Int",
  ],
  [
    "0",
    "Int",
  ],
  [
    "b > 0",
    "Bool",
  ],
  [
    "z",
    "Bool",
  ],
  [
    "b > 0 || z",
    "Bool",
  ],
]
`;

exports[`resolveStatements should resolve statements for case-4 1`] = `
[
  [
    "x",
    "Int",
  ],
  [
    "y",
    "Int",
  ],
  [
    "x + y",
    "Int",
  ],
  [
    "b",
    "Int",
  ],
  [
    "b",
    "Int",
  ],
  [
    "1",
    "Int",
  ],
  [
    "b + 1",
    "Int",
  ],
  [
    "b",
    "Int",
  ],
  [
    "0",
    "Int",
  ],
  [
    "b > 0",
    "Bool",
  ],
  [
    "z",
    "Bool",
  ],
  [
    "b > 0 || z",
    "Bool",
  ],
  [
    "w",
    "Int?",
  ],
  [
    "w!!",
    "Int",
  ],
  [
    "0",
    "Int",
  ],
  [
    "w!! > 0",
    "Bool",
  ],
  [
    "b > 0 || z || (w!! > 0)",
    "Bool",
  ],
]
`;

exports[`resolveStatements should resolve statements for case-5 1`] = `
[
  [
    "p",
    "Point",
  ],
  [
    "p.x",
    "Int",
  ],
  [
    "0",
    "Int",
  ],
  [
    "p.x == 0",
    "Bool",
  ],
  [
    "p",
    "Point",
  ],
  [
    "p.y",
    "Int",
  ],
  [
    "0",
    "Int",
  ],
  [
    "p.y == 0",
    "Bool",
  ],
  [
    "p.x == 0 && p.y == 0",
    "Bool",
  ],
  [
    "p",
    "Point",
  ],
  [
    "p.toCell()",
    "Cell",
  ],
]
`;

exports[`resolveStatements should resolve statements for case-6 1`] = `
[
  [
    "10",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "0",
    "Int",
  ],
  [
    "a > 0",
    "Bool",
  ],
  [
    "a",
    "Int",
  ],
  [
    "10",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "10",
    "Int",
  ],
  [
    "-10",
    "Int",
  ],
  [
    "a < -10",
    "Bool",
  ],
  [
    "a",
    "Int",
  ],
  [
    "1",
    "Int",
  ],
  [
    "-1",
    "Int",
  ],
  [
    "a",
    "Int",
  ],
  [
    "1",
    "Int",
  ],
]
`;

exports[`resolveStatements should resolve statements for case-7 1`] = `
[
  [
    "1",
    "Int",
  ],
  [
    "2",
    "Int",
  ],
  [
    "SomeStruct{
        a: 1,
        b: 2
    }",
    "SomeStruct",
  ],
]
`;

exports[`resolveStatements should resolve statements for case-8 1`] = `
[
  [
    "arg",
    "Bool",
  ],
  [
    "self.",
    "Contract",
  ],
  [
    "value",
    "Int",
  ],
  [
    "1",
    "Int",
  ],
  [
    "arg",
    "Bool",
  ],
  [
    "!arg",
    "Bool",
  ],
  [
    "self.",
    "Contract",
  ],
  [
    "value",
    "Int",
  ],
  [
    "2",
    "Int",
  ],
  [
    "self.",
    "Contract",
  ],
  [
    "value",
    "Int",
  ],
  [
    "3",
    "Int",
  ],
  [
    "self.",
    "Contract2",
  ],
  [
    "value",
    "Int",
  ],
  [
    "1",
    "Int",
  ],
  [
    "self.",
    "Contract2",
  ],
  [
    "value2",
    "S",
  ],
  [
    "1",
    "Int",
  ],
  [
    "self",
    "Contract2",
  ],
  [
    "self.value",
    "Int",
  ],
  [
    "S{ a: 1, b: self.value }",
    "S",
  ],
  [
    "self.",
    "Contract3",
  ],
  [
    "value",
    "Int",
  ],
  [
    "1",
    "Int",
  ],
  [
    "self",
    "Contract3",
  ],
  [
    "self.update()",
    "<void>",
  ],
  [
    "self.",
    "Contract3",
  ],
  [
    "value",
    "Int",
  ],
  [
    "self",
    "Contract3",
  ],
  [
    "self.value",
    "Int",
  ],
  [
    "1",
    "Int",
  ],
  [
    "self.value + 1",
    "Int",
  ],
]
`;

exports[`resolveStatements should resolve statements for case-9 1`] = `
[
  [
    "src",
    "bounced<A>",
  ],
  [
    "src.a",
    "Int",
  ],
  [
    "src",
    "bounced<A>",
  ],
  [
    "src.b",
    "Bool",
  ],
]
`;
