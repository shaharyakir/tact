#include "case-5_SampleContract.headers.fc";
#include "case-5_SampleContract.stdlib.fc";
#include "case-5_SampleContract.storage.fc";

;;
;; Contract SampleContract functions
;;

tuple $SampleContract$_contract_init() impure inline_ref {
    tuple $self = null();
    return $self;
}

;;
;; Receivers of a Contract SampleContract
;;

((tuple), ()) $SampleContract$_receive_binary_First(tuple $self, (int, int) $msg) impure inline {
    var $self = $self;
    var ($msg'amount, $msg'myCoins) = $msg;
    return ($self, ());
}

((tuple), ()) $SampleContract$_receive_binary_Second(tuple $self, (int, int, slice, int, (int), (int)) $msg) impure inline {
    var $self = $self;
    var ($msg'amount_bigger, $msg'thisDoesNotFit, $msg'myAddress, $msg'myBool, ($msg'myStruct'amount), ($msg'myStruct2'amount)) = $msg;
    return ($self, ());
}

(tuple, ()) $SampleContract$_receive_text_cdd0f5966a37922238a6954ee918a162cc590409ef65f094cee81e9d0bc52bb4(tuple $self) impure inline {
    var $self = $self;
    return ($self, ());
}

((tuple), ()) $SampleContract$_receive_binary_bounce_Slice(tuple $self, slice $msg) impure inline {
    var $self = $self;
    var $msg = $msg;
    return ($self, ());
}

((tuple), ()) $SampleContract$_receive_binary_bounce_Second(tuple $self, (int) $tst) impure inline {
    var $self = $self;
    var ($tst'amount_bigger) = $tst;
    int $x = $tst'amount_bigger;
    return ($self, ());
}

((tuple), ()) $SampleContract$_receive_binary_bounce_First(tuple $self, (int) $msg) impure inline {
    var $self = $self;
    var ($msg'amount) = $msg;
    return ($self, ());
}

;;
;; Get methods of a Contract SampleContract
;;

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128
    );
}

_ get_abi_ipfs() {
    return "ipfs://QmTbT2A6i1hvqHJNghFARnp5ErPGXJrdu7aGCPEYBVPV1B";
}

_ lazy_deployment_completed() {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract SampleContract
;;

(tuple, int) $SampleContract$_contract_router(tuple self, int msg_bounced, slice in_msg) impure inline_ref {
    
    if (msg_bounced) {
        ;; Skip 0xFFFFFFFF
        in_msg.skip_bits(32);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    ;; Handle bounced messages
    if (msg_bounced) {
        
        ;; Bounced handler for Second message
        if (op == 254871020) {
            var msg = in_msg~$Second$_load_bounced();
            self~$SampleContract$_receive_binary_bounce_Second(msg);
            return (self, true);
        }
        
        ;; Bounced handler for First message
        if (op == 899738521) {
            var msg = in_msg~$First$_load_bounced();
            self~$SampleContract$_receive_binary_bounce_First(msg);
            return (self, true);
        }
        
        ;; Bounced handler for Slice message (Generic)
        self~$SampleContract$_receive_binary_bounce_Slice(in_msg);
        return (self, true);
    }
    
    ;; Receive First message
    if (op == 899738521) {
        var msg = in_msg~$First$_load();
        self~$SampleContract$_receive_binary_First(msg);
        return (self, true);
    }
    
    ;; Receive Second message
    if (op == 254871020) {
        var msg = in_msg~$Second$_load();
        self~$SampleContract$_receive_binary_Second(msg);
        return (self, true);
    }
    
    ;; Text Receivers
    if (op == 0) {
        var text_op = slice_hash(in_msg);
        
        ;; Receive "Increment" message
        if (text_op == 0xcdd0f5966a37922238a6954ee918a162cc590409ef65f094cee81e9d0bc52bb4) {
            self~$SampleContract$_receive_text_cdd0f5966a37922238a6954ee918a162cc590409ef65f094cee81e9d0bc52bb4();
            return (self, true);
        }
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $SampleContract$_contract_load();
    
    ;; Handle operation
    int handled = self~$SampleContract$_contract_router(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(handled, 130);
    
    ;; Persist state
    $SampleContract$_contract_store(self);
}
