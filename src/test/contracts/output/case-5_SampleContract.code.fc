#include "case-5_SampleContract.headers.fc";
#include "case-5_SampleContract.stdlib.fc";
#include "case-5_SampleContract.storage.fc";

;;
;; Contract SampleContract functions
;;

tuple $SampleContract$_contract_init() impure inline_ref {
    tuple $self = null();
    return $self;
}

;;
;; Receivers of a Contract SampleContract
;;

((tuple), ()) $SampleContract$_receive_binary_Shoko(tuple $self, (int, int) $msg) impure inline {
    var $self = $self;
    var ($msg'amount, $msg'thisDoesNotFit) = $msg;
    return ($self, ());
}

((tuple), ()) $SampleContract$_receive_binary_Koko(tuple $self, (int, int) $msg) impure inline {
    var $self = $self;
    var ($msg'amount_bigger, $msg'thisDoesNotFit) = $msg;
    return ($self, ());
}

(tuple, ()) $SampleContract$_receive_text_cdd0f5966a37922238a6954ee918a162cc590409ef65f094cee81e9d0bc52bb4(tuple $self) impure inline {
    var $self = $self;
    return ($self, ());
}

(tuple, ()) $SampleContract$_receive_bounce_Slice(tuple $self, slice $msg) impure inline {
    var $self = $self;
    return ($self, ());
}

(tuple, ()) $SampleContract$_receive_bounce_Koko(tuple $self, slice $msg) impure inline {
    var $self = $self;
    return ($self, ());
}

(tuple, ()) $SampleContract$_receive_bounce_Shoko(tuple $self, slice $msg) impure inline {
    var $self = $self;
    return ($self, ());
}

(tuple, ()) $SampleContract$_receive_bounce_Zhoko(tuple $self, slice $msg) impure inline {
    var $self = $self;
    return ($self, ());
}

;;
;; Get methods of a Contract SampleContract
;;

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128
    );
}

_ get_abi_ipfs() {
    return "ipfs://QmZfC5DS8eeM5U2gCzKTsc1dPaeW5Zzvc7iRH9n5dvbru9";
}

_ lazy_deployment_completed() {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract SampleContract
;;

(tuple, int) $SampleContract$_contract_router(tuple self, int msg_bounced, slice in_msg) impure inline_ref {
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    ;; Handle bounced messages
    if (msg_bounced) {
        self~$SampleContract$_receive_bounce_Slice(in_msg);
        return (self, true);
    }
    
    ;; Receive Shoko message
    if (op == 3744520988) {
        var msg = in_msg~$Shoko$_load();
        self~$SampleContract$_receive_binary_Shoko(msg);
        return (self, true);
    }
    
    ;; Receive Koko message
    if (op == 994470181) {
        var msg = in_msg~$Koko$_load();
        self~$SampleContract$_receive_binary_Koko(msg);
        return (self, true);
    }
    
    ;; Text Receivers
    if (op == 0) {
        var text_op = slice_hash(in_msg);
        
        ;; Receive "Increment" message
        if (text_op == 0xcdd0f5966a37922238a6954ee918a162cc590409ef65f094cee81e9d0bc52bb4) {
            self~$SampleContract$_receive_text_cdd0f5966a37922238a6954ee918a162cc590409ef65f094cee81e9d0bc52bb4();
            return (self, true);
        }
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $SampleContract$_contract_load();
    
    ;; Handle operation
    int handled = self~$SampleContract$_contract_router(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(handled, 130);
    
    ;; Persist state
    $SampleContract$_contract_store(self);
}
