;;
;; Type: First
;; Header: 0x35a0eb99
;; TLB: first#35a0eb99 amount:uint32 myCoins:coins = First
;;

(slice, ((int, int))) $First$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 899738521);
    var v'amount = sc_0~load_uint(32);
    var v'myCoins = sc_0~load_coins();
    return (sc_0, (v'amount, v'myCoins));
}

(slice, ((int))) $First$_load_bounced(slice sc_0) inline {
    var v'amount = sc_0~load_uint(32);
    return (sc_0, (v'amount));
}

;;
;; Type: MyStruct
;; TLB: _ amount:int257 = MyStruct
;;

(slice, ((int))) $MyStruct$_load(slice sc_0) inline {
    var v'amount = sc_0~load_int(257);
    return (sc_0, (v'amount));
}

;;
;; Type: Second
;; Header: 0x0f3105ec
;; TLB: second#0f3105ec amount_bigger:uint64 thisDoesNotFit:uint256 myAddress:address myBool:bool myStruct:MyStruct{amount:int257} myStruct2:MyStruct{amount:int257} = Second
;;

(slice, ((int, int, slice, int, (int), (int)))) $Second$_load(slice sc_0) inline_ref {
    throw_unless(129, sc_0~load_uint(32) == 254871020);
    var v'amount_bigger = sc_0~load_uint(64);
    var v'thisDoesNotFit = sc_0~load_uint(256);
    var v'myAddress = sc_0~__tact_load_address();
    var v'myBool = sc_0~load_int(1);
    var v'myStruct = sc_0~$MyStruct$_load();
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'myStruct2 = sc_1~$MyStruct$_load();
    return (sc_0, (v'amount_bigger, v'thisDoesNotFit, v'myAddress, v'myBool, v'myStruct, v'myStruct2));
}

(slice, ((int))) $Second$_load_bounced(slice sc_0) inline {
    var v'amount_bigger = sc_0~load_uint(64);
    return (sc_0, (v'amount_bigger));
}

;;
;; Type: SampleContract
;;

tuple $SampleContract$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return null();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        return $SampleContract$_contract_init();
    }
}

() $SampleContract$_contract_store(tuple v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    set_data(b.end_cell());
}