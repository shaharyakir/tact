;;
;; Type: Shoko
;; Header: 0xdf30db1c
;; TLB: shoko#df30db1c amount:uint32 thisDoesNotFit:uint256 = Shoko
;;

(slice, ((int, int))) $Shoko$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 3744520988);
    var v'amount = sc_0~load_uint(32);
    var v'thisDoesNotFit = sc_0~load_uint(256);
    return (sc_0, (v'amount, v'thisDoesNotFit));
}

;;
;; Type: Koko
;; Header: 0x3b466925
;; TLB: koko#3b466925 amount_bigger:uint64 thisDoesNotFit:uint256 = Koko
;;

(slice, ((int, int))) $Koko$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 994470181);
    var v'amount_bigger = sc_0~load_uint(64);
    var v'thisDoesNotFit = sc_0~load_uint(256);
    return (sc_0, (v'amount_bigger, v'thisDoesNotFit));
}

;;
;; Type: SampleContract
;;

tuple $SampleContract$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return null();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        return $SampleContract$_contract_init();
    }
}

() $SampleContract$_contract_store(tuple v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    set_data(b.end_cell());
}