;;
;; Type: SetIntMap1
;; Header: 0x5a04a318
;; TLB: set_int_map1#5a04a318 key:int257 value:Maybe int257 = SetIntMap1
;;

(slice, ((int, int))) $SetIntMap1$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 1510253336);
    var v'key = sc_0~load_int(257);
    var v'value = sc_0~load_int(1) ? sc_0~load_int(257) : null();
    return (sc_0, (v'key, v'value));
}

;;
;; Type: SetIntMap2
;; Header: 0x6125cef6
;; TLB: set_int_map2#6125cef6 key:int257 value:Maybe bool = SetIntMap2
;;

(slice, ((int, int))) $SetIntMap2$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 1629867766);
    var v'key = sc_0~load_int(257);
    var v'value = sc_0~load_int(1) ? sc_0~load_int(1) : null();
    return (sc_0, (v'key, v'value));
}

;;
;; Type: SetIntMap3
;; Header: 0xd7689249
;; TLB: set_int_map3#d7689249 key:int257 value:Maybe ^cell = SetIntMap3
;;

(slice, ((int, cell))) $SetIntMap3$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 3613954633);
    var v'key = sc_0~load_int(257);
    var v'value = sc_0~load_int(1) ? sc_0~load_ref() : null();
    return (sc_0, (v'key, v'value));
}

;;
;; Type: SomeStruct
;; TLB: _ value:int257 = SomeStruct
;;

builder $SomeStruct$_store(builder build_0, (int) v) inline {
    var (v'value) = v;
    build_0 = build_0.store_int(v'value, 257);
    return build_0;
}

cell $SomeStruct$_store_cell((int) v) inline {
    return $SomeStruct$_store(begin_cell(), v).end_cell();
}

((int)) $SomeStruct$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (int vvv'value) = __tact_tuple_destroy_1(v);
    return (vvv'value);
}

cell $SomeStruct$_store_opt(tuple v) inline {
    if (null?(v)) {
        return null();
    }
    return $SomeStruct$_store_cell($SomeStruct$_not_null(v));
}

(slice, ((int))) $SomeStruct$_load(slice sc_0) inline {
    var v'value = sc_0~load_int(257);
    return (sc_0, (v'value));
}

tuple $SomeStruct$_as_optional((int) v) inline {
    var (v'value) = v;
    return __tact_tuple_create_1(v'value);
}

tuple $SomeStruct$_load_opt(cell cl) inline {
    if (null?(cl)) {
        return null();
    }
    var sc = cl.begin_parse();
    return $SomeStruct$_as_optional(sc~$SomeStruct$_load());
}

tuple $SomeStruct$_to_tuple(((int)) v) inline {
    var (v'value) = v;
    return __tact_tuple_create_1(v'value);
}

tuple $SomeStruct$_to_opt_tuple(tuple v) inline {
    if (null?(v)) { return null(); } 
    return $SomeStruct$_to_tuple($SomeStruct$_not_null(v)); 
}

tuple $SomeStruct$_to_opt_external(tuple v) inline {
    var loaded = $SomeStruct$_to_opt_tuple(v);
    if (null?(loaded)) {
        return null();
    } else {
        return (loaded);
    }
}

;;
;; Type: SetIntMap4
;; Header: 0x16d453c5
;; TLB: set_int_map4#16d453c5 key:int257 value:Maybe SomeStruct{value:int257} = SetIntMap4
;;

(slice, ((int, tuple))) $SetIntMap4$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 383013829);
    var v'key = sc_0~load_int(257);
    var v'value = sc_0~load_int(1) ? $SomeStruct$_as_optional(sc_0~$SomeStruct$_load()) : null();
    return (sc_0, (v'key, v'value));
}

;;
;; Type: SetIntMap5
;; Header: 0xa779553f
;; TLB: set_int_map5#a779553f key:int257 value:Maybe address = SetIntMap5
;;

(slice, ((int, slice))) $SetIntMap5$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2809746751);
    var v'key = sc_0~load_int(257);
    var v'value = sc_0~__tact_load_address_opt();
    return (sc_0, (v'key, v'value));
}

;;
;; Type: SetAddrMap1
;; Header: 0x684e5e4d
;; TLB: set_addr_map1#684e5e4d key:address value:Maybe int257 = SetAddrMap1
;;

(slice, ((slice, int))) $SetAddrMap1$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 1749966413);
    var v'key = sc_0~__tact_load_address();
    var v'value = sc_0~load_int(1) ? sc_0~load_int(257) : null();
    return (sc_0, (v'key, v'value));
}

;;
;; Type: SetAddrMap2
;; Header: 0x2533e390
;; TLB: set_addr_map2#2533e390 key:address value:Maybe bool = SetAddrMap2
;;

(slice, ((slice, int))) $SetAddrMap2$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 624157584);
    var v'key = sc_0~__tact_load_address();
    var v'value = sc_0~load_int(1) ? sc_0~load_int(1) : null();
    return (sc_0, (v'key, v'value));
}

;;
;; Type: SetAddrMap3
;; Header: 0xfee42706
;; TLB: set_addr_map3#fee42706 key:address value:Maybe ^cell = SetAddrMap3
;;

(slice, ((slice, cell))) $SetAddrMap3$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 4276365062);
    var v'key = sc_0~__tact_load_address();
    var v'value = sc_0~load_int(1) ? sc_0~load_ref() : null();
    return (sc_0, (v'key, v'value));
}

;;
;; Type: SetAddrMap4
;; Header: 0x645c6979
;; TLB: set_addr_map4#645c6979 key:address value:Maybe SomeStruct{value:int257} = SetAddrMap4
;;

(slice, ((slice, tuple))) $SetAddrMap4$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 1683777913);
    var v'key = sc_0~__tact_load_address();
    var v'value = sc_0~load_int(1) ? $SomeStruct$_as_optional(sc_0~$SomeStruct$_load()) : null();
    return (sc_0, (v'key, v'value));
}

;;
;; Type: SetAddrMap5
;; Header: 0x67cb4d03
;; TLB: set_addr_map5#67cb4d03 key:address value:Maybe address = SetAddrMap5
;;

(slice, ((slice, slice))) $SetAddrMap5$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 1741376771);
    var v'key = sc_0~__tact_load_address();
    var v'value = sc_0~__tact_load_address_opt();
    return (sc_0, (v'key, v'value));
}

;;
;; Type: MapTestContract
;;

builder $MapTestContract$_store(builder build_0, (cell, cell, cell, cell, cell, cell, cell, cell, cell, cell) v) inline {
    var (v'intMap1, v'intMap2, v'intMap3, v'intMap4, v'intMap5, v'addrMap1, v'addrMap2, v'addrMap3, v'addrMap4, v'addrMap5) = v;
    build_0 = build_0.store_dict(v'intMap1);
    build_0 = build_0.store_dict(v'intMap2);
    var build_1 = begin_cell();
    build_1 = build_1.store_dict(v'intMap3);
    build_1 = build_1.store_dict(v'intMap4);
    build_1 = build_1.store_dict(v'intMap5);
    var build_2 = begin_cell();
    build_2 = build_2.store_dict(v'addrMap1);
    build_2 = build_2.store_dict(v'addrMap2);
    build_2 = build_2.store_dict(v'addrMap3);
    var build_3 = begin_cell();
    build_3 = build_3.store_dict(v'addrMap4);
    build_3 = build_3.store_dict(v'addrMap5);
    build_2 = store_ref(build_2, build_3.end_cell());
    build_1 = store_ref(build_1, build_2.end_cell());
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

(slice, ((cell, cell, cell, cell, cell, cell, cell, cell, cell, cell))) $MapTestContract$_load(slice sc_0) inline {
    var v'intMap1 = sc_0~load_dict();
    var v'intMap2 = sc_0~load_dict();
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'intMap3 = sc_1~load_dict();
    var v'intMap4 = sc_1~load_dict();
    var v'intMap5 = sc_1~load_dict();
    slice sc_2 = sc_1~load_ref().begin_parse();
    var v'addrMap1 = sc_2~load_dict();
    var v'addrMap2 = sc_2~load_dict();
    var v'addrMap3 = sc_2~load_dict();
    slice sc_3 = sc_2~load_ref().begin_parse();
    var v'addrMap4 = sc_3~load_dict();
    var v'addrMap5 = sc_3~load_dict();
    return (sc_0, (v'intMap1, v'intMap2, v'intMap3, v'intMap4, v'intMap5, v'addrMap1, v'addrMap2, v'addrMap3, v'addrMap4, v'addrMap5));
}

(cell, cell, cell, cell, cell, cell, cell, cell, cell, cell) $MapTestContract$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$MapTestContract$_load();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        return $MapTestContract$_contract_init();
    }
}

() $MapTestContract$_contract_store((cell, cell, cell, cell, cell, cell, cell, cell, cell, cell) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    b = $MapTestContract$_store(b, v);
    set_data(b.end_cell());
}