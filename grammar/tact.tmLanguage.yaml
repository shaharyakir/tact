# TACT TextMate grammar file
# Built using ideas from https://github.com/microsoft/TypeScript-TmLanguage/blob/44ab72b502092e6797791078d181747fc9512097/TypeScript.YAML-tmLanguage
# TextMate regexp reference: https://macromates.com/manual/en/regular_expressions
---
name: tact
scopeName: source.tact
fileTypes: [tact]
foldingStartMarker: "\\{s*$"
foldingStopMarker: "^\\s*\\}"

variables:
  
  # Name mappings
  nameTypeRef: entity.name.type.tact
  nameSelf: variable.language.self.tact
  nameVariable: variable.name.tact
  nameFunction:  entity.name.function.tact

  # Common regexps
  startOfIdentifier: (?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))
  endOfIdentifier: (?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))
  startOfDeclaration: "{{startOfIdentifier}}"
  hexNumber: \b0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*\b
  decNumber: \b[0-9]+\b
  anyNumber: (?:{{hexNumber}})|(?:{{decNumber}})
  inlineComment: \/\*([^\*]|(\*[^\/]))*\*\/
  space: (?:\s|(?:{{inlineComment}}))*
  id: '\b[\w]+\b'

patterns:
  - include: "#comments"
  - include: "#import"
  - include: "#struct"
  - include: "#contract-or-trait"
  - include: "#fun-declaration"
  - include: "#statements"

repository:
  import:
    name: meta.import.tact
    begin: '{{startOfDeclaration}}\b(import)\b\s*'
    beginCaptures:
      "1":
        name: keyword.other.import.tact
    end: \s*(;)
    endCaptures:
      "1":
        name: punctuation.terminator.tact
    patterns:
      - include: "#comments"
      - include: "#strings"

  # structure and message definition
  struct:
    name: meta.struct.tact
    begin: '{{startOfDeclaration}}\b(struct|message)\b'
    beginCaptures:
      "1":
        name: keyword.other.struct
    end: (?<=\})
    patterns:
      - include: "#comments"
      - include: "#struct-header"
      - include: "#struct-body"
  struct-header:
    patterns:
      - include: "#comments"
      - match: "{{id}}"
        captures:
          "0": { name: "{{nameTypeRef}}" }
      - match: '\(({{anyNumber}})\)'
        captures:
          "1": { name: "constant.numeric" }
  struct-body:
    begin: \{
    beginCaptures:
      "0": { name: punctuation.definition.block.tact }
    end: \}
    endCaptures:
      "0": { name: punctuation.definition.block.tact }
    patterns:
      - include: "#comments"
      - include: "#field-declaration"

  # structure and message definition
  contract-or-trait:
    name: meta.struct.tact
    begin: '{{startOfDeclaration}}\b(contract|trait)\b'
    beginCaptures:
      "1":
        name: keyword.other.struct
    end: (?<=\})
    patterns:
      - include: "#comments"
      - name: keyword.control.with.tact
        match: "with"
      - name: '{{nameTypeRef}}'
        match: "{{id}}"
      - include: "#contract-or-trait-body"
  contract-or-trait-body:
    begin: \{
    beginCaptures:
      "0": { name: punctuation.definition.block.tact }
    end: \}
    endCaptures:
      "0": { name: punctuation.definition.block.tact }
    patterns:
      - include: "#comments"
      - include: "#init-declaration"
      - include: "#receive-declaration"
      - include: "#bounce-declaration"
      - include: "#fun-declaration"
      - include: "#const-declaration"
      - include: "#field-declaration"

  # Body
  field-declaration:
    name: meta.struct.field.tact
    begin: "({{id}})"
    beginCaptures:
      "1":
        name: variable.object.property.tact
    end: "(;)"
    endCaptures:
      "1":
        name: punctuation.terminator.tact
    patterns:
      - include: "#comments"
      - include: "#type-annotation"
      - include: "#variable-init"

  # Const
  const-declaration:
    name: meta.struct.field.tact
    begin: '(const)\s*({{id}})'
    beginCaptures:
      "1": { name: keyword.control.const.tact }
      "2": { name: variable.object.property.tact }
    end: "(;)"
    endCaptures:
      "1":
        name: punctuation.terminator.tact
    patterns:
      - include: "#comments"
      - include: "#type-annotation"
      - include: "#variable-init"
  
  # Init
  init-declaration:
    name: meta.struct.field.tact
    begin: "(init)"
    beginCaptures:
      "1":
        name: keyword.control.init.tact
    end: (?<=\})
    patterns:
      - include: "#comments"
      - include: "#fun-arguments"
      - include: "#block-declaration"

  # Receive
  receive-declaration:
    name: meta.struct.field.tact
    begin: "(receive|external)"
    beginCaptures:
      "1":
        name: keyword.control.receive.tact
    end: (?<=\})
    patterns:
      - include: "#comments"
      - include: "#fun-arguments"
      - include: "#block-declaration"

  # Bounce
  bounce-declaration:
    name: meta.struct.field.tact
    begin: "(bounce)"
    beginCaptures:
      "1":
        name: keyword.control.bounce.tact
    end: (?<=\})
    patterns:
      - include: "#comments"
      - include: "#fun-arguments"
      - include: "#block-declaration"

  # Function
  fun-declaration:
    name: meta.function.tact
    begin: \b(get|native|extends|mutates|virtual|overrides|fun)\b
    beginCaptures:
      "1":
        name: storage.modifier.tact
    end: (?<=\}|;)
    patterns:
      - include: "#fun-declaration-body"
  fun-declaration-body:
    patterns:
      - include: "#comments"
      - include: "#fun-arguments"
      - include: "#type-annotation" # Return type
      - include: "#block-declaration"
      - name: storage.modifier.tact
        match: \b(get|native|extends|mutates|virtual|overrides|fun)\b
      - name: meta.definition.function.tact {{nameFunction}}
        match: "{{id}}"

  # Arguments
  fun-arguments:
    name: meta.parameters.tact
    begin: \(
    beginCaptures:
      "0": { name: punctuation.definition.parameters.begin.tact }
    end: \)
    endCaptures:
      "0": { name: punctuation.definition.parameters.end.tact }
    patterns:
      - include: "#comments"
      - include: "#strings"
      - match: '(?:(self)|({{id}}))\s*(:)\s*({{id}})'
        captures:
          "1": { name: '{{nameSelf}}'}
          "2": { name: '{{nameVariable}}' }
          "4": { name: '{{nameTypeRef}}' }

  # Code block
  block-declaration:
    name: meta.block.tact
    begin: \{
    beginCaptures:
      "0": { name: punctuation.definition.block.begin.tact }
    end: \}
    endCaptures:
      "0": { name: punctuation.definition.block.end.tact }
    patterns:
      - include: "#statements"

  # Statements
  statements:
    patterns:
      - include: "#comments"
      - include: "#block-declaration"
      - include: "#expressions"

  # Expressions
  expressions:
    patterns:
      - include: "#comments"
      - include: "#keywords"
      - include: "#numeric"
      - include: "#strings"
      - include: "#type-annotation"
      - include: "#variables"
      - include: "#function-call"
      - include: "#struct-init"

  # Struct init
  struct-init:
    name: meta.struct.init
    begin: '({{id}})\s*(\{)'
    beginCaptures:
      "1": { name: '{{nameTypeRef}}' }
      "2": { name: punctuation.definition.block.begin.tact }
    end: '(})'
    endCaptures:
      "2": { name: punctuation.definition.block.end.tact }
    patterns: 
      - include: "#comments"
      - include: "#struct-property"
  struct-property:
    name: meta.struct.init.property,
    begin: '({{id}})\s*(:)'
    beginCaptures:
      "1": { name: '{{nameVariable}}' }
      "2": { name: punctuation.property.tact }
    end: (?=\}|\,)
    patterns:
      - include: '#comments'
      - include: '#expressions'
  variable-init:
    name: meta.variable.property.init
    begin: '(=)'
    beginCaptures:
      "1": { name: punctuation.tact }
    end: (?=\}|\{|\,|\;)
    patterns:
      - include: '#comments'
      - include: '#expressions'

  # Type annotation
  type-annotation:
    name: meta.type.annotation.tact
    begin: "(:)\\s+"
    beginCaptures:
      "1":
        name: keyword.operator.type.annotation.tact
    end: (?=\{|\;|\=|\,|\))
    patterns:
      - include: "#comments"
      - include: "#type-as"
      - include: "#type-generic"
      - name: keyword.operator.optional.tact
        match: \?
      - match: "{{id}}"
        name: "{{nameTypeRef}}"
  type-generic:
    name: meta.type.generics.tact
    begin: "<"
    end: ">"
    patterns:
      - include: "#comments"
      - include: "#type-as"
      - name: punctuation.tact
        match: ","
      - match: "{{id}}"
        name: "{{nameTypeRef}}"
  type-as:
    name: meta.type.annotation.as.tact
    begin: "(as)\\s+"
    end: (?=\{|\;|\=|\,|\))
    beginCaptures:
      "1":
        name: keyword.control.as.tact
    patterns:
      - include: "#comments"
      - match: "{{id}}"
        name: storage.modifier.tact

  # Low level
  keywords:
    patterns:
      - name: keyword.control.tact
        match: \b(if|else|while|do|until|repeat|return|extends|mutates|virtual|overrides|inline|native|let|const|fun|self|is|initOf|map|get|as)\b
      - name: keyword.operator
        match: (?<=\s)(<=>|>=|<=|!=|==|\^>>|\~>>|>>|<<|\/%|\^%|\~%|\^\/|\~\/|\+=|-=|\*=|\/=|~\/=|\^\/=|%=|\^%=|<<=|>>=|~>>=|\^>>=|&=|\|=|\^=|\^|=|~|\/|%|-|\*|\+|>|<|&|\||:|\?)(?=\s)
      - name: keyword.other
        match: \b(false|true)\b
  strings:
    name: string.quoted.double.tact
    begin: '"'
    end: '"'
  numeric:
    name: constant.numeric
    match: "{{anyNumber}}"
  comments:
    patterns:
      - name: comment.line
        match: \/\/(.*)
      - name: comment.block
        begin: /\*
        end: \*/
  variables:
    patterns:
      - match: '{{id}}(?!\s*\()(?!\s*\{)'
        name: '{{nameVariable}}'
  function-call:
    patterns:
      - match: '{{id}}(?=\s*\()(?!\s*\{)'
        name: '{{nameFunction}}'
